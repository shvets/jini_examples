import com.sun.jini.start.ServiceDescriptor;
import com.sun.jini.start.NonActivatableServiceDescriptor;
import com.sun.jini.config.ConfigUtil;

com.sun.jini.start {
  private static jiniHome = System.getProperty("jini.home");

  private static host = ConfigUtil.getHostName();
  private static portForSystem = "8081";
  private static hostSuffix = "";

  private static jskdl = " http://" + host + ":" + portForSystem + "/jsk-dl.jar";

  private static portForService = "8082";
  private static policy = jiniHome + "/installverify/support/jsk-all.policy";

  private httpServerForSystem = 
    new NonActivatableServiceDescriptor(
      "",
      policy,
      jiniHome + "/lib/classserver.jar",
      "com.sun.jini.tool.ClassServer",
      new String[] {"-port", portForSystem, "-dir", jiniHome + "/lib-dl", "-verbose"});

  private httpServerForService = 
    new NonActivatableServiceDescriptor(
      "",
      policy,
      jiniHome + "/lib/classserver.jar",
      "com.sun.jini.tool.ClassServer",
      new String[] {"-port", portForService, "-dir", "target/docroot/service", "-verbose"});
 
  private reggie = new NonActivatableServiceDescriptor(
            "http://" + host + ":" + portForSystem + "/reggie-dl.jar" + jskdl,
            policy,
            jiniHome + "/lib/reggie.jar",
            "com.sun.jini.reggie.TransientRegistrarImpl",
            new String[] { jiniHome + "/installverify/support/reggie.config" });

  private browser = new NonActivatableServiceDescriptor(
            "http://" + host + ":" + portForSystem + "/browser-dl.jar" + jskdl,
            policy,
            jiniHome + "/lib/browser.jar",
            "com.sun.jini.example.browser.Browser",
            new String[] { jiniHome + "/installverify/support/browser.config" });

  // JINI 2.1 libs should be in this directory
  private static jiniRoot = jiniHome + "/lib/";

  // The directory where you have the .jar
  private static jarRoot = "target/lib/";

  private static separator = System.getProperty("path.separator");

  private static repositoryHome = System.getProperty("repository.home");

  private static glyphLib = repositoryHome + "/org/jini/glyph/0.2/glyph-0.2.jar";

  static classpath = ConfigUtil.concat(new Object[] {
//      "C:/Java/jdk1.6.0/lib/tools.jar", separator, 
//      repositoryHome + "ant/ant-apt/1.7.0beta2/ant-apt-1.7.0beta2.jar", separator, 
      jiniRoot, "jsk-lib.jar", separator,
//      jiniRoot, "jsk-platform.jar", separator, 
//      jiniRoot, "sun-util.jar", separator, 
      jarRoot, "glyph-service.jar", separator, 
      glyphLib
  });

//static classpath = ConfigUtil.concat(new Object[] {
//      "C:/Java/jini2_1/lib/jsk-lib.jar;C:/Java/jini2_1/lib/jsk-platform.jar;
//C:/maven-repository/org/jini/glyph/0.2/glyph-0.2.jar;
//C:/Java/jdk1.6.0/lib/tools.jar;
//C:/maven-repository/ant/ant-apt/1.7.0beta2/ant-apt-1.7.0beta2.jar", separator,
//      jiniRoot, "jsk-lib.jar", separator,
//      jiniRoot, "jsk-platform.jar", separator, 
//      jiniRoot, "sun-util.jar", separator,
//      svcRoot, "GlyphRemoteFilter.jar", separator, "."});

  private static config = ConfigUtil.concat(new Object[] {
      "./", "src/main/config/glyph.config"});

  private static codebase = ConfigUtil.concat(new Object[] {
      "http://", host, ":", portForService, 
      "/glyph-service-dl.jar"
  });

  private filterService = 
    new NonActivatableServiceDescriptor(
      codebase, policy, classpath,
      "org.sf.jini.examples.glyph.GlyphRemoteFilterServiceImpl",
      new String[] { config });

  static serviceDescriptors = new ServiceDescriptor[] {
    httpServerForSystem,
    httpServerForService,
    reggie,
    browser, 
    filterService
  };

}                                                
