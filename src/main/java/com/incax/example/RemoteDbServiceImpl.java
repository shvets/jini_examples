/*
*  This code was generated by Inca X
*
*  For more information please contact
*  support@incax.com
*  www.incax.com
*
*/

package com.incax.example;

import com.incax.jdbc.ConnectionPool;
import net.jini.config.Configuration;
import net.jini.config.ConfigurationException;
import net.jini.config.ConfigurationProvider;
import net.jini.export.Exporter;
import org.sf.jini.examples.common.ProxiedJiniService;
import org.sf.jini.examples.common.SingleServiceLocator;

import java.rmi.server.ExportException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;

//admin interfaces

//jini 2_0 configuration

//RMI

public class RemoteDbServiceImpl extends ProxiedJiniService /*, ProxyAccessor*/ {

  //key into config file
  private static String PACKAGE_NAME = "com.incax.dbservice";

  //DbService Specific
  private ConnectionPool _dbConnectionPool;
  //example part #3 Prepared SQL statements held in the service's config file
  private Map _statements = new HashMap();
  private Logger _logger = Logger.getLogger(getClass().getName());


  public RemoteDbServiceImpl(String[] args) throws ConfigurationException, ExportException, DbServiceException {
    Exporter exporter = createExporter(args);

    createProxyAdapter(exporter);

    RemoteDbServiceImpl2 remoteDbServiceImpl2 = new RemoteDbServiceImpl2();
    //setRemote(remoteDbServiceImpl2);

    Configuration config = ConfigurationProvider.getInstance(args);

    initDatabaseParameters(config);

    remoteDbServiceImpl2.setDBConnectionPool(_dbConnectionPool);
    remoteDbServiceImpl2.setStatements(_statements);

    export(remoteDbServiceImpl2);

    createServiceItem(PACKAGE_NAME);
  }


  protected Exporter createExporter(String[] args) throws ConfigurationException {
    Configuration config = ConfigurationProvider.getInstance(args);

    return (Exporter) config.getEntry(PACKAGE_NAME, "serverExporter", Exporter.class);
  }

  private void initDatabaseParameters(Configuration config)
    throws DbServiceException {

    //initialize JDBC with the information in the service's config file
    try {

      String jdbcDriver = (String) config.getEntry(PACKAGE_NAME, "jdbcDriver", String.class, null);
      String jdbcUrl = (String) config.getEntry(PACKAGE_NAME, "jdbcUrl", String.class, null);
      String jdbcUser = (String) config.getEntry(PACKAGE_NAME, "jdbcUser", String.class, "");
      String jdbcPw = (String) config.getEntry(PACKAGE_NAME, "jdbcPw", String.class, "");
      //get the size of the connection pool
      Integer defaultSize = new Integer(3);
      Integer size = (Integer) config.getEntry(PACKAGE_NAME, "connectionPoolSize", int.class, defaultSize);
      //parse the preparedStatement values into a lookup table
      String[] ps = (String[])
        config.getEntry(PACKAGE_NAME, "preparedStatements", String[].class, null);
      if (ps == null) {
        throw new DbServiceException("Missing preparedStatement value in config file");
      }
      for (int i = 0; i < ps.length; i++) {
        int pos = ps[i].indexOf("=");
        if (pos == -1) {
          throw new DbServiceException("Invalid preparedStatement " + ps[i]);
        }
        String key = ps[i].substring(0, pos);
        String statement = ps[i].substring(pos + 1);

        System.out.println("Prepared statement " + key + "=" + statement);

        _statements.put(key, statement);
      }
      //now try to set up the jdbc connections
      //MAKE SURE YOUR JDBC driver classes are in the project classpath
      Class.forName(jdbcDriver);
      _dbConnectionPool =
        ConnectionPool.newInstance(jdbcUrl, jdbcUser, jdbcPw, size.intValue());

    } catch (Exception ex) {
      _logger.info("Failed to initialize service " + ex.getMessage());
      throw new DbServiceException("Failed to initialize service", ex);
    }
  }

  public static void main(String args[]) throws Exception {
    System.out.println("Started ...");

    SingleServiceLocator serviceLocator = new SingleServiceLocator("jini://localhost");

    RemoteDbServiceImpl service = new RemoteDbServiceImpl(args);

    service.register(serviceLocator, 40*1000);

    System.out.println("Registered.");
  }

}
