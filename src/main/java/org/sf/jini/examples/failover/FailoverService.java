/*
 *  This code was generated by Inca X
 *
 *  For more information please contact
 *  support@incax.com
 *  www.incax.com
 *
 */

package org.sf.jini.examples.failover;

import com.sun.jini.start.LifeCycle;
import net.jini.config.Configuration;
import net.jini.config.ConfigurationException;
import net.jini.config.ConfigurationProvider;
import net.jini.core.lookup.ServiceID;
import net.jini.core.lookup.ServiceTemplate;
import net.jini.core.entry.Entry;
import net.jini.discovery.LookupDiscovery;
import net.jini.discovery.LookupDiscoveryManager;
import net.jini.lookup.JoinManager;
import net.jini.security.ProxyPreparer;
import net.jini.export.Exporter;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.tcp.TcpServerEndpoint;
import org.sf.jini.examples.common.ServiceIDHelper;
import org.sf.jini.examples.common.MultipleServiceLocator;
import org.sf.jini.examples.common.ProxiedJiniService;
import org.sf.jini.examples.remote.RemoteFilter;
import org.sf.jini.examples.remote.RemoteFilterImpl;

import java.io.File;
import java.io.IOException;
import java.rmi.activation.ActivationException;

/**
 * Creates new "failover" service.
 *
 * @version 1.1 12/09/2006
 * @author Alexander Shvets
 */
public class FailoverService extends ProxiedJiniService {
  /** The service name. */
  private String PACKAGE_NAME = "failover";

  /**
   * Creates new service.
   *
   * @param args the array of arguments
   * @param lifeCycle the life cycle object
   * @throws IOException I/O exception
   * @throws ConfigurationException the configuration exception
   * @throws ActivationException the activation exception
   */
  public FailoverService(String[] args, LifeCycle lifeCycle)
         throws IOException, ConfigurationException, ActivationException {

    init(args);
  }

  /**
   * Initializes the service.
   *
   * @param args the array of arguments
   * @throws IOException I/O exception
   * @throws ConfigurationException the configuration exception
   * @throws ActivationException the activation exception
   */
  private void init(String[] args)
          throws IOException, ConfigurationException, ActivationException {
    System.out.println("Started ...");

    Exporter exporter = new BasicJeriExporter(TcpServerEndpoint.getInstance(0), new BasicILFactory());

    createProxyAdapter(exporter);

    export(new RemoteFilterImpl());

    Class[] serviceInterfaces = new Class[] { RemoteFilter.class };

    ServiceTemplate serviceTemplate = new ServiceTemplate(null, serviceInterfaces, null);

    ProxyPreparer proxyPreparer = new FailoverPreparer(serviceTemplate, new MultipleServiceLocator());

    serviceObject = proxyPreparer.prepareProxy(/*getProxy()*/serviceObject);

    createServiceItem(PACKAGE_NAME);
    
    ServiceID serviceID = retrieveServiceID(args);

    register(serviceID, LookupDiscovery.ALL_GROUPS);

    System.out.println("Registered.");
  }

  /**
   * Retrieves the service ID from the storage.
   *
   * @param args the array of arguments
   * @return the service ID
   * @throws ConfigurationException the configuration exception
   * @throws IOException I/O exception
   */
  private ServiceID retrieveServiceID(String[] args) throws ConfigurationException, IOException {
    Configuration config = ConfigurationProvider.getInstance(args);

    //code to save and reload the service ID

    String persistentDirectory = (String) config.getEntry(PACKAGE_NAME, "persistentDirectory", String.class);

    ServiceIDHelper serviceIDHelper = new ServiceIDHelper();

    ServiceID serviceID = null;

    if (persistentDirectory != null) {
      serviceID = serviceIDHelper.loadServiceId(new File(persistentDirectory));
    }

    serviceIDHelper.storeServiceId(serviceID, new File(persistentDirectory));

    return serviceID;
  }

  /**
   * Registers the service on lookup discovery manager.
   *
   * @param serviceID the service ID
   * @param groups the array of groups
   * @throws IOException I/O exception
   */
  public void register(ServiceID serviceID, String[] groups) throws IOException {
    getServiceItem().serviceID = serviceID;

    LookupDiscoveryManager lookupDiscoveryManager = new LookupDiscoveryManager(groups, null, null);

    Entry[] attributes = getServiceItem().attributeSets;

    new JoinManager(serviceObject, attributes, serviceID, lookupDiscoveryManager, null);
  }

}
